---
import { getCollection } from "astro:content";
import { marked } from "marked";
import DownloadBase from "~/components/download-base.html";
import Logo from "~/components/Logo";
import Tag from "~/components/tag.html";
import { getRecipes } from "~/content/collections/recipes";
import { getStacks } from "~/content/collections/stacks";
import { langs, useTranslations, useUrl } from "~/i18n";
import Layout from "~/layouts/Layout.astro";
import {
  getTagName,
  formatStars,
  getAlternativeMetadata,
  getTagTitle,
  timeago,
} from "~/helpers";

export const getStaticPaths = async () => {
  return langs
    .map((lang) =>
      getRecipes(lang).map(({ data }) => ({
        params: { lang, slug: data.slug },
      }))
    )
    .flat();
};

const slug = Astro.params.slug;
if (!slug) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
  return new Response("Missing parameter", { status: 404 });
}

const lang = Astro.params.lang;
const t = useTranslations(lang);
const url = useUrl(lang);

const recipes = getRecipes(lang);
const stacks = getStacks(lang);

const recipe = recipes.find((recipe) => recipe.data.slug === slug)?.data;
if (!recipe) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
  return new Response("Not found", { status: 404 });
}

const tags = await getCollection("tags");

const {
  name,
  description,
  // version,
  updated_at,
  tags: _tags,
  readme,
  env,
  homepage,
  repository,
  stars,
  license,
  author,
  alternativeTo,
  dependencies,
} = recipe;

const associatedStacks =
  recipe.dependencies?.map(({ name, icon, role, custom }) => ({
    custom,
    role,
    ...(custom && {
      name,
      slug: name.toLowerCase(),
      icon: icon ?? name.toLowerCase(),
    }),
    ...(!custom && stacks.find((stack) => stack.data.slug === name)?.data),
  })) ?? [];

// const command = `stack run ${slug}`;

const similar = Array.from(
  new Set(
    [
      ...recipes.filter(
        (candidate) =>
          candidate.data.slug !== slug &&
          // ensure both alternativeTo and candidate.alternativeTo have an intersection
          (alternativeTo || []).some((slug) =>
            candidate.data.alternativeTo?.includes(slug)
          )
      ),
      // ...recipes.filter(
      //   (candidate) =>
      //     candidate.data.slug !== slug &&
      //     // ensure both tags and candidate.tags have an intersection
      //     (tags || []).some((tag) => candidate.data.tags?.includes(tag.id))
      // ),
    ].map((entry) => entry.data.slug)
  )
)
  .slice(0, 5)
  .map((slug) => recipes.find((recipe) => recipe.data.slug === slug)?.data);
---

<Layout lang={lang} title={`${name} recipe`} description={description}>
  <script
    slot="head"
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@id": [slug, lang].filter(Boolean).join("-"),
      "@type": "SoftwareApplication",
      name,
      url: new URL(Astro.url.pathname, Astro.site),
      // softwareVersion: version,
      headline: name,
      description,
      // about: description,
      // screenshot: "[image-url]",
      image: {
        "@type": "ImageObject",
        url: readme?.match(/!\[.*\]\((.*)\)/)?.[1],
      },
      applicationCategory: "BrowserApplication",
      // applicationSubCategory: "Product Comparison",
      inLanguage: lang,
      operatingSystem: "Web Browser",
      browserRequirements: "Requires Stack Desktop",
      dateModified: new Date(updated_at ?? "").toISOString(),
      // aggregateRating: {
      //   "@type": "AggregateRating",
      //   ratingValue: 4.7,
      //   ratingCount: stars,
      // },
      // downloadUrl: new URL(url(`/downloads/${slug}.stack`), Astro.site),
    })}
  />

  <div slot="left" class="section h-full">
    <div class="container">
      <div
        class="sticky top-12 flex flex-col lg:flex-row 2xl:flex-col justify-between items-start"
      >
        <div>
          <h1
            transition:name={`title-${name}`}
            set:html={`${t("*Recipe*: {name}", { name })}`}
          />
          <p>{description}</p>
          {
            stars && (
              <span class="subtle text-sm">★&nbsp;{formatStars(stars)}</span>
            )
          }
          {
            _tags
              ?.map((tag) => {
                const t = tags.find(({ data }) => data.slug === tag)?.data;
                if (!t) return null;

                return (
                  <a href={url(`/?q=%23${tag}`)}>
                    <Tag>
                      <abbr title={t.title}>{t.name}</abbr>
                    </Tag>
                  </a>
                );
              })
              .filter(Boolean)
          }
          {
            (homepage || repository) && (
              <p class="text-sm">
                {homepage && <a href={homepage}>Homepage</a>}
                {homepage && repository && " · "}
                {repository && <a href={repository}>Source code</a>}
              </p>
            )
          }
          <span class="text-sm">
            {author && <span>Author: {author}</span>}
            {
              license && (
                <span>
                  {author && " · "}License: {license}
                </span>
              )
            }
          </span>
          <p class="text-sm subtle">
            <!-- Version: {version} -->
            {t("Last update")}
            {
              updated_at && (
                <time
                  datetime={updated_at.toISOString()}
                  title={new Intl.DateTimeFormat(lang, {
                    dateStyle: "full",
                    timeStyle: undefined,
                  }).format(updated_at)}
                >
                  {timeago(updated_at, lang)}
                </time>
              )
            }
          </p>
        </div>

        <div class="pt-4 flex flex-row gap-4">
          <a
            href={url(`/recipes/${slug}.stack`)}
            rel="nofollow"
            class="inline-flex highlight"
          >
            <DownloadBase>
              <svg
                class="fill-current w-4 h-4 m-1 inline"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 17 17"
              >
                <path d="M2 1l14 7-14 7z"></path>
              </svg>
              <span set:html={t("Start it now")} />
              <!-- {size && <small class="font-normal">({formatSize(size)})</small>} -->
            </DownloadBase>
          </a>
          <a
            href={`/downloads/recipes/${slug}.stack`}
            rel="nofollow"
            data-title={t("Download the stack file")}
          >
            <DownloadBase>
              <svg
                class="fill-current w-4 h-4 m-1 inline"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 17 17"
              >
                <path d="M12 8V2H8v6H2l8 8 8-8"></path>
              </svg>
              <!-- {size && <small class="font-normal">({formatSize(size)})</small>} -->
            </DownloadBase>
          </a>
        </div>
      </div>
    </div>
  </div>

  <div class="section">
    <div class="container">
      <h2 set:html={t("About *{name}*", { name })} />

      <h3 set:html={t("Recipe ingredients")} />
      <table class="border-separate border-spacing-4 -mx-4">
        {
          associatedStacks?.map(
            ({
              custom,
              name,
              description,
              slug,
              icon,
              stars,
              license,
              role,
            }) => (
              <tr class="mb-4 gap-4 border-spacing-4">
                <td class="flex items-center gap-4 w-full  border-spacing-4">
                  <h4>
                    {custom ? (
                      <>
                        <Logo slug={slug} />
                        <span class="subtle">&nbsp;{name}</span>
                      </>
                    ) : (
                      <a href={url(`/${slug}`)}>
                        <Logo slug={slug} />
                        &nbsp;{name}
                      </a>
                    )}
                    {stars && (
                      <span class="subtle text-sm">
                        ★&nbsp;{formatStars(stars)}
                      </span>
                    )}
                    {license && <small class="subtle">({license})</small>}
                  </h4>
                </td>

                <td>{role}</td>
              </tr>
            )
          )
        }
      </table>

      {
        readme ? (
          <div class="content" set:html={marked.parse(readme)} />
        ) : (
          <p class="subtle">{t("No description provided.")}</p>
        )
      }
      <hr class="hr" />

      <h3 set:html={t("Environment variables")} />
      {
        Object.entries(env ?? {}).length === 0 ? (
          <p class="subtle" set:html={t("No environment variables defined.")} />
        ) : (
          <details>
            <summary
              class="subtle"
              set:html={t("View environment variables")}
            />
            <dl class="max-h-96 overflow-y-auto">
              {Object.entries(env ?? {}).map(([key, value]) => (
                <>
                  <dt>{key}</dt>
                  <dd>
                    <span style="user-select: none; -webkit-user-select: none;">
                      &nbsp;
                    </span>
                    {value}
                  </dd>
                </>
              ))}
            </dl>
          </details>
        )
      }
    </div>
  </div>

  <div slot="right" class="section">
    <div class="container">
      {
        Boolean(alternativeTo?.length) && (
          <div class="box 2xl:bg-slate-50">
            <h2 set:html={t("An alternative to")} />
            <ol class="light">
              {alternativeTo?.map((slug) => (
                <li class="mb-4">
                  <a href={url(`/alternativesto/${slug}`)}>
                    <Logo slug={slug} />
                    &nbsp;{getAlternativeMetadata(slug)?.name}
                  </a>
                </li>
              ))}
            </ol>
          </div>
        )
      }

      {
        similar && similar.length > 0 && (
          <div class="box 2xl:bg-slate-50">
            <h2 set:html={t("Related recipes")} />
            <ol class="light">
              {similar
                .map((e) => e as any)
                .map(({ slug, name, description, tags, stars, icon }) => (
                  <li class="mb-8">
                    {/* <div class="float-right mr-6 if-connected">
                  <a href={`/${slug}.stack`}>
                    <Button>Install</Button>
                  </a>
                </div> */}
                    <p transition:name={`title-${name}`}>
                      <a href={url(`/recipes/${slug}`)}>
                        <Logo slug={slug} icon={icon} />
                        &nbsp;{name}
                      </a>
                    </p>
                    <p>{description}</p>
                    {stars && (
                      <span class="subtle text-sm">
                        ★&nbsp;{formatStars(stars)}
                      </span>
                    )}
                    {tags?.map((tag: any) => (
                      <a href={url(`/?q=%23${tag}`)}>
                        <Tag>
                          <abbr title={getTagTitle(tag)}>
                            {getTagName(tag)}
                          </abbr>
                        </Tag>
                      </a>
                    ))}
                  </li>
                ))}
            </ol>
          </div>
        )
      }
    </div>
  </div>
</Layout>
