---
import Logo from "~/components/Logo";
import Tag from "~/components/tag.html";
import { langs, useTranslations, useUrl } from "~/i18n";
import Layout from "~/layouts/Layout.astro";
import { getRecipes } from "~content/collections/recipes";
import { getStacks } from "~content/collections/stacks";
import { timeago } from "~helpers";

export const getStaticPaths = () => {
  return langs.map((lang) => ({ params: { lang } }));
};

const lang = Astro.params.lang;
const t = useTranslations(lang);
const url = useUrl(lang);

const title = t("Recipes");

const stacks = getStacks(lang);

const recipes = getRecipes(lang);
recipes.forEach((recipe) => {
  recipe.data.dependencies =
    recipe.data.dependencies?.map(({ name, icon, custom }) => ({
      custom,
      ...(custom && {
        name,
        slug: name.toLowerCase(),
        icon: icon ?? name.toLowerCase(),
      }),
      ...(!custom && stacks.find((stack) => stack.data.slug === name)?.data),
    })) ?? ([] as any);
});
---

<Layout lang={lang} title={title}>
  <div slot="left" class="section">
    <div class="container">
      <!-- <span class="suptitle">{t("Recipes")}</span> -->
      <h1 set:html={t("*Curated Recipes* of powerful stack combinations.")} />
      <p
        class="subtle mb-8"
        set:html={t(
          "Recipes are curated stack combinations. Each recipe is a collection of stacks that work well together."
        )}
      />
    </div>
  </div>

  <div class="section">
    <div class="container">
      {
        recipes
          .sort((a: any, b: any) => b.data.updated_at - a.data.updated_at)
          .map(
            ({
              data: { slug, name, icon, updated_at, description, dependencies },
            }) => (
              <>
                <a class="box flex" href={url(`/recipes/${slug}`)}>
                  <div class="relative w-full flex flex-col">
                    <div class="flex flex-row gap-7 items-start">
                      <Logo
                        slug={slug}
                        icon={icon}
                        className="align-right"
                        style={{ zoom: 3 }}
                      />

                      <div class="flex flex-col">
                        <span class="suptitle hidden md:flex">
                          {t("Recipe")}
                        </span>

                        <h4 set:html={name} />

                        <p class="subtle">{description}</p>
                        {updated_at && (
                          <span class="text-sm absolute end-0 bottom-0 subtle">
                            <time
                              datetime={updated_at.toISOString()}
                              title={new Intl.DateTimeFormat(lang, {
                                dateStyle: "full",
                                timeStyle: undefined,
                              }).format(updated_at)}
                            >
                              {timeago(updated_at, lang)}
                            </time>
                          </span>
                        )}

                        <span class="hidden md:flex flex-row gap-2">
                          {dependencies?.map((dep: any) => (
                            <Tag>
                              <Logo slug={dep.slug} />
                              &nbsp;
                              {dep.name}
                            </Tag>
                          ))}
                        </span>
                      </div>
                    </div>
                  </div>
                </a>
              </>
            )
          )
      }
    </div>
  </div>
</Layout>
