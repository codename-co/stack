---
import { getCollection } from "astro:content";
import Download from "~/components/download-base.html";
import Logo from "~/components/Logo";
import Tag from "~/components/tag.html";
import { getStacks } from "~/content/collections/stacks";
import { langs, textDirection, useTranslations, useUrl } from "~/i18n";
import Layout from "~/layouts/Layout.astro";
import { formatStars, getAlternativeMetadata, timeago } from "~/helpers";
import { WallOfTags } from "~components/WallOfTags";
// import { Graph } from "~/components/Graph";
// import { graphData } from "~/helpers";

export const getStaticPaths = () => {
  return langs.map((lang) => ({ params: { lang } }));
};

const lang = Astro.params.lang;
const t = useTranslations(lang);
const url = useUrl(lang);

const stacks = getStacks(lang);
// const promoted = await getCollection("promoted");

const alternatives = await getCollection("alternatives");

const tags = await getCollection("tags");

const totalStars = stacks.reduce(
  (acc, stack) => acc + (stack.data.stars ?? 0),
  0
);

const title = t("The best of free software, accessible");
const description = t(
  "Access {count}+ curated open source software packages, ready to install with one click.",
  { count: Math.floor(stacks.length / 10) * 10 }
);
---

<Layout lang={lang} title={title} description={description}>
  <div slot="left" class="section h-full">
    <div class="container">
      <h1 set:html={t("The *best free software* made&nbsp;*accessible*.")} />
      <p class="subtle mb-8" style="max-width: 24em">
        {t("Spin up local alternatives to")}
        <a
          href={url("/alternativesto/notion")}
          aria-label="Alternatives to Notion"
          style="white-space: nowrap"
        >
          <Logo slug="notion" />
          Notion</a
        >, <a
          href={url("/alternativesto/chatgpt")}
          aria-label="Alternatives to ChatGPT"
          style="white-space: nowrap"
        >
          <Logo slug="chatgpt" />
          ChatGPT</a
        >, <a
          href={url("/alternativesto/figma")}
          aria-label="Alternatives to Figma"
          style="white-space: nowrap"
        >
          <Logo slug="figma" />
          Figma</a
        >
        {t("and other")}
        <a
          href={url("/alternativesto")}
          aria-label="Alternatives to popular software"
          >{t("popular software")}</a
        >. {t("Remix your own.")}
      </p>
      <div class="sticky top-8">
        <a href={url("/download")} aria-label={t("Download Stack")}>
          <Download>{t("Download")}</Download>
        </a>
        <p class="subtle my-3">
          <small>{t("Available for macOS")}</small>
        </p>
      </div>
    </div>
  </div>

  <div slot="right" class="section h-full">
    <div class="container">
      <!-- <Graph client:only="react" data={graphData()} width={336} height={720} /> -->

      <!-- <p class="my-12" set:html={t("Browse *by category*")} /> -->
      <!-- <ol
        class="light columns-2 lg:columns-3 2xl:columns-1 text-sm 2xl:mt-[670px]"
      >
        {
          tags
            .map(({ data }) => [
              data,
              stacks
                .map(({ data }) => data)
                .filter(({ tags }) => tags?.includes(data.slug)) ?? [],
            ])
            .filter(([, stacks]) => Array.isArray(stacks) && stacks.length > 0)
            .sort(([, a], [, b]) => (b as any[]).length - (a as any[]).length)
            .map(([tag, stacks]: any[]) => (
              <li class="mb-1 ">
                <a href={url(`/?q=%23${tag.slug}`)} class="opacity-80">
                  {tag.title ? `${tag.title} (${tag.name})` : tag.name}
                  {stacks.length > 1 && <Tag>{stacks.length}</Tag>}
                </a>
              </li>
            ))
        }
      </ol> -->
    </div>
  </div>

  <div class="section">
    <div class="container">
      <div class="box" style="overflow-x: hidden">
        <span
          class="suptitle"
          set:html={t("★ {starCount} cumulative stars", {
            starCount: formatStars(totalStars, lang),
          })}
        />

        <h2
          set:html={t(
            "Access {count}+ curated open source software packages, ready to install with one click.",
            { count: Math.floor(stacks.length / 10) * 10 }
          )}
        />

        <p
          set:html={t(
            "Free, secure, and privacy-focused alternatives to [popular apps]({url}).",
            { url: url("/alternativesto") }
          )}
        />
        <br />

        <WallOfTags
          rtl={textDirection(lang) === "rtl"}
          items={stacks.map((alt) => ({
            ...alt.data,
            url: url(`/${alt.data.slug}`),
          }))}
        />
      </div>

      <!-- <div
        class="hidden lg:block lg:-mx-24 2xl:mx-0 mt-12 p-6 bg-slate-100 border border-slate-200 rounded-3xl overflow-x-hidden"
      >
        <div class="grid gap-4 grid-flow-col">
          {
            promoted
              .map(({ data }) =>
                stacks.find((stack) => stack.data.slug === data.slug)
              )
              .filter(Boolean)
              .map((stack) => [
                stack?.data,
                getAlternativeMetadata(stack?.data.alternativeTo?.[0] ?? ""),
              ])
              .reduce((acc, [stack, alternative]) => {
                // only keep unique alternatives
                if (!acc.find(([_, alt]) => alt.slug === alternative?.slug)) {
                  acc.push([stack, alternative]);
                }
                return acc;
              }, [] as any[])
              .slice(0, 10)
              .map(([data, alternative]) => (
                <div class="content-evenly [writing-mode:vertical-lr] [text-orientation:upright]">
                  <a
                    href={url(`/alternativesto/${alternative.slug}`)}
                    aria-label={`Alternatives to ${alternative.name}`}
                    data-title-disabled={alternative.name}
                    class="whitespace-nowrap [writing-mode:horizontal-tb] text-center [font-size:2.8em]"
                  >
                    <Logo slug={alternative.slug} />
                    <p style="font-size: 0.4em">{alternative.name}</p>
                  </a>
                  <span
                    aria-disabled="true"
                    class="subtle select-none"
                    style="font-size: 1.4em"
                  >
                    ↓
                  </span>
                  <a
                    href={url(`/${data.slug}`)}
                    aria-label={data.name}
                    data-title-disabled={data.name}
                    class="whitespace-nowrap [writing-mode:horizontal-tb] text-center [font-size:2.8em]"
                  >
                    <Logo slug={data.slug} />
                    <p
                      style="font-size: 0.4em"
                      transition:name={`title-${data.name}`}
                    >
                      {data.name}
                    </p>
                  </a>
                </div>
              ))
          }
        </div>
      </div> -->

      <div
        class="box bg-slate-50 text-slate-500 dark:bg-slate-900 dark:text-slate-200"
      >
        <div class="columns items-center">
          <div class="column">
            <a href={url("/download")} aria-label={t("Download Stack")}>
              <Download>{t("Download Stack")}</Download>
            </a>
          </div>
          <div class="column text-end">
            <a href="#search">
              {t("Then install software in one-click ↓")}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="section relative">
    <div class="container">
      <div
        class="sticky top-8 h-13 z-20 outline outline-[2em] outline-white dark:bg-slate-900 dark:text-slate-200 dark:outline-slate-950"
      >
        <input
          id="search"
          type="search"
          list="autocomplete"
          placeholder={t("Search software")}
          class="w-full p-2 bg-white dark:!bg-slate-900 dark:focus:!bg-slate-950"
        />
      </div>
      <datalist id="autocomplete">
        {
          [
            ...alternatives.map(({ data }) => data.name),
            ...stacks.map(({ data }) => data.name),
          ]
            .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))
            .map((name) => <option value={name} />)
        }
      </datalist>
      <br />
      <br />
      <ol id="stacks" class="light">
        {
          stacks
            .map(({ data }) => data)
            .map(
              ({
                slug,
                name,
                description,
                updated_at,
                tags: _tags,
                stars,
                alternativeTo,
              }) => (
                <li
                  class="relative"
                  data-search={`${_tags?.map((tag) => `#${tag}`).join(",")},${alternativeTo
                    ?.map((slug) => getAlternativeMetadata(slug)?.name)
                    .join(",")}`}
                >
                  {(alternativeTo?.length ?? 0) > 0 && (
                    <a
                      class="absolute end-0 top-6 grid gap-2 grid-flow-col opacity-0 z-10 text-base select-none pointer-events-none transition-opacity"
                      href={url(`/${slug}.stack`)}
                      tabindex="-1"
                      set:html={t("a smart alternative to {apps}", {
                        apps: alternativeTo
                          ?.map((slug) => [slug, Logo({ slug }) as any])
                          .map(
                            ([slug, { props }]) =>
                              (props.dangerouslySetInnerHTML.__html
                                ? `<span style="color: ${props.style.color}">${props.dangerouslySetInnerHTML.__html}</span>`
                                : "") +
                              alternatives.find(
                                ({ data }) => data.slug === slug
                              )?.data.name
                          )
                          .join(", "),
                      })}
                    />
                    // <a
                    //   class="absolute right-0 top-5 grid gap-3 grid-flow-col opacity-0"
                    //   href={url(`/${slug}.stack`)}
                    // >
                    //   A smart alternative to
                    //   {alternativeTo?.map((slug) => (
                    //     <Logo slug={slug} />
                    //   ))}
                    // </a>
                  )}
                  <a href={url(`/${slug}`)} aria-label={name}>
                    <article>
                      <h4>
                        <Logo slug={slug} />
                        &nbsp;{name}
                      </h4>
                      <div class="text-base mt-2 mb-1">{description}</div>
                      {/* <span class="subtle text-sm">{rank}</span> */}
                      {stars && (
                        <span class="subtle text-sm">
                          ★&nbsp;{formatStars(stars)}
                        </span>
                      )}
                      {_tags?.map((_tag) => {
                        const tag = tags.find(
                          ({ data }) => data.slug === _tag
                        )?.data;

                        return (
                          <span
                            onclick={`event.preventDefault(); search.value = "${`#${_tag}`}"; search.dispatchEvent(new Event("input"))`}
                            aria-label={`Browse #${_tag} software`}
                          >
                            <Tag>
                              <abbr title={tag?.title}>{tag?.name}</abbr>
                            </Tag>
                          </span>
                        );
                      })}
                      {updated_at && (
                        <span class="text-sm absolute end-0 bottom-6 subtle">
                          <time
                            datetime={updated_at.toISOString()}
                            title={new Intl.DateTimeFormat(lang, {
                              dateStyle: "full",
                              timeStyle: undefined,
                            }).format(updated_at)}
                          >
                            {timeago(updated_at, lang)}
                          </time>
                        </span>
                      )}
                    </article>
                  </a>
                </li>
              )
            )
        }
      </ol>
    </div>
  </div>

  <script is:inline>
    const applySearch = () => {
      const q = new URL(location).searchParams.get("q");
      const handleSearch = (e, q) => {
        stacks
          .querySelectorAll("li")
          .forEach(
            (li) =>
              (li.hidden =
                !li.dataset.search.toLowerCase().includes(q.toLowerCase()) &&
                !li.textContent.toLowerCase().includes(q.toLowerCase()))
          );
        // scroll to the input
        if (!e) {
          document.getElementById("search").scrollIntoView({
            behavior: "instant",
            block: "start",
          });
        }
      };
      if (q) {
        search.value = q;
        handleSearch(undefined, q);
      }
      search.addEventListener("input", (e) => {
        handleSearch(e, search.value);
      });
    };

    applySearch();
    document.addEventListener("astro:after-swap", applySearch);
  </script>

  <style>
    li:hover .absolute {
      opacity: 1;
    }
  </style>
</Layout>
