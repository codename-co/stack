# SPDX-License-Identifier: MIT
# This is a https://stack.lol docker compose file.

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

services:
  kong-migrations:
    image: kong:${KONG_VERSION:-3.9.0}
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    restart: on-failure

  kong-migrations-up:
    image: kong:${KONG_VERSION:-3.9.0}
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    restart: on-failure

  kong:
    image: kong:${KONG_VERSION:-3.9.0}
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    # ports:
    #   # The following two environment variables default to an insecure value (0.0.0.0)
    #   # according to the CIS Security test.
    #   - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
    #   - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
    #   # Making them mandatory but undefined, like so would be backwards-breaking:
    #   # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
    #   # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
    #   # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

    #   - "8001:8001/tcp"
    #   - "8444:8444/tcp"
    #   - "8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:3
    # read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      # - ./config:/opt/kong
    configs:
      - source: kong_config
        target: /opt/kong/kong.yaml
    security_opt:
      - no-new-privileges
    labels:
      dash.url: https://$PROJECT.$DOMAIN
      traefik.http.routers.kong.rule: Host(`$PROJECT.$DOMAIN`)
      traefik.http.services.kong.loadbalancer.server.port: 8000

  kong-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

configs:
  kong_config:
    content: |
      _format_version: "3.0"
      _transform: true

      services:
        - name: example_service
          host: httpbin.konghq.com
          port: 80
          routes:
            - name: example_route
              paths:
                - /mock
              strip_path: true

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
