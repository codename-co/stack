# SPDX-License-Identifier: MIT
# This is a https://stack.lol docker compose file.

# Inspiration: <https://github.com/makeplane/plane/blob/ca88675dbf7ed5e9eba40ce1d594b500e3d38997/docker-compose.yml>

services:
  plane-web:
    # container_name: web
    image: makeplane/plane-frontend:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: node web/server.js web
    depends_on:
      - plane-api
    labels:
      dash.icon: nextdotjs
      dash.url: https://$PROJECT.$DOMAIN
      # traefik.http.routers.plane-web.rule: Host(`$PROJECT.$DOMAIN`)
      # traefik.http.services.plane-web.loadbalancer.server.port: 3000

  plane-admin:
    # container_name: admin
    image: makeplane/plane-admin:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: node admin/server.js admin
    depends_on:
      - plane-api
      - plane-web
    labels:
      dash.icon: nextdotjs
      dash.url: https://$PROJECT.$DOMAIN/god-mode/
      # traefik.http.routers.plane-admin.rule: Host(`$PROJECT.$DOMAIN`) && PathPrefix(`/god-mode/`)
      # traefik.http.middlewares.strip-prefix-admin.stripprefix.prefixes: /god-mode
      # traefik.http.routers.plane-admin.middlewares: strip-prefix-admin
      # traefik.http.services.plane-admin.loadbalancer.server.port: 3000

  plane-space:
    # container_name: space
    image: makeplane/plane-space:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: node space/server.js space
    depends_on:
      - plane-api
      - plane-web
    labels:
      dash.icon: nextdotjs
      dash.url: https://$PROJECT.$DOMAIN/spaces/
      # traefik.http.routers.plane-space.rule: Host(`$PROJECT.$DOMAIN`) && PathPrefix(`/spaces/`)
      # traefik.http.middlewares.strip-prefix-spaces.stripprefix.prefixes: /spaces
      # traefik.http.routers.plane-spaces.middlewares: strip-prefix-admin
      # traefik.http.services.plane-space.loadbalancer.server.port: 3000

  plane-api:
    # container_name: api
    image: makeplane/plane-backend:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: ./bin/docker-entrypoint-api.sh
    env_file: .apiserver.env
    depends_on:
      - plane-db
      - plane-redis
    labels:
      dash.url: https://$PROJECT.$DOMAIN/api/
      # traefik.http.routers.plane-api.rule: Host(`$PROJECT.$DOMAIN`) && (PathPrefix(`/api/`) || PathPrefix(`/auth/`))
      # traefik.http.middlewares.strip-prefix-api.stripprefix.prefixes: /api
      # traefik.http.middlewares.strip-prefix-auth.stripprefix.prefixes: /auth
      # traefik.http.routers.plane-api.middlewares: strip-prefix-admin-api,strip-prefix-admin-auth
      # traefik.http.services.plane-api.loadbalancer.server.port: 8000

  # plane-worker:
  #   # container_name: bgworker
  #   image: makeplane/plane-worker:0.11
  #   restart: always
  #   # command: ./bin/docker-entrypoint-worker.sh
  #   env_file: .apiserver.env
  #   depends_on:
  #     - plane-api
  #     - plane-db
  #     - plane-redis

  plane-beat-worker:
    # container_name: beatworker
    image: makeplane/plane-backend:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: ./bin/docker-entrypoint-beat.sh
    env_file: .apiserver.env
    depends_on:
      - plane-api
      - plane-db
      - plane-redis

  plane-migrator:
    # container_name: plane-migrator
    image: makeplane/plane-backend:v${PLANE_VERSION:-0.24.1}
    restart: no
    command: ./bin/docker-entrypoint-migrator.sh
    env_file: .apiserver.env
    depends_on:
      - plane-db
      - plane-redis

  plane-live:
    # container_name: plane-live
    image: makeplane/plane-live:v${PLANE_VERSION:-0.24.1}
    restart: always
    command: node live/dist/server.js
    labels:
      dash.icon: express
      dash.url: https://$PROJECT.$DOMAIN/live/
      # traefik.http.routers.live.rule: Host(`$PROJECT.$DOMAIN`) && PathPrefix(`/live/`)
      # traefik.http.services.live.loadbalancer.server.port: 3000

  plane-db:
    # container_name: plane-db
    image: postgres:15.7-alpine
    restart: always
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    labels:
      dash.icon: postgres

  plane-redis:
    # container_name: plane-redis
    image: valkey/valkey:7.2.5-alpine
    restart: always
    volumes:
      - redisdata:/data
    labels:
      dash.icon: redis

  plane-mq:
    # container_name: plane-mq
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  plane-minio:
    # container_name: plane-minio
    image: minio/minio
    restart: always
    command: server /export --console-address ":9090"
    volumes:
      - uploads:/export
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    labels:
      dash.url: https://$PROJECT.$DOMAIN/${AWS_S3_BUCKET_NAME}
      # traefik.http.routers.plane-minio.rule: Host(`$PROJECT.$DOMAIN`) && PathPrefix(`/${AWS_S3_BUCKET_NAME}`)
      # traefik.http.routers.plane-minio.middlewares: strip-prefix-minio
      # traefik.http.middlewares.strip-prefix-minio.stripprefix.prefixes: /${AWS_S3_BUCKET_NAME}
      # traefik.http.services.plane-minio.loadbalancer.server.port: 9000

  # Comment this if you already have a reverse proxy running
  plane-proxy:
    # container_name: proxy
    image: makeplane/plane-proxy:v${PLANE_VERSION:-0.24.1}
    restart: always
    # ports:
    #   - ${NGINX_PORT}:80
    environment:
      FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}
      BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
    depends_on:
      - plane-web
      - plane-api
      - plane-space
      - plane-admin
      - plane-live
    links:
      - plane-web:web
      - plane-api:api
      - plane-space:space
      - plane-admin:admin
      - plane-live:live
    labels:
      dash.icon: nginx
      dash.url: https://$PROJECT.$DOMAIN
      traefik.http.routers.plane-proxy.rule: Host(`$PROJECT.$DOMAIN`)
      traefik.http.services.plane-proxy.loadbalancer.server.port: 80

volumes:
  pgdata:
  redisdata:
  uploads:
  rabbitmq_data:
