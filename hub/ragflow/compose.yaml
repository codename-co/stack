# SPDX-License-Identifier: MIT
# This is a https://stack.lol docker compose file.

services:
  ragflow:
    depends_on:
      ragflow-mysql:
        condition: service_healthy
    links:
      - ragflow-es01
      - ragflow-mysql
      - ragflow-minio
      - ragflow-redis
    image: ${RAGFLOW_IMAGE}
    volumes:
      - ragflow-logs:/ragflow/logs
      - ./config/ragflow.conf:/etc/nginx/conf.d/ragflow.conf
      - ./config/proxy.conf:/etc/nginx/proxy.conf
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    env_file: .env
    environment:
      - TZ=${TIMEZONE}
      - HF_ENDPOINT=${HF_ENDPOINT}
      - MACOS=${MACOS}
    restart: on-failure
    # https://docs.docker.com/engine/daemon/prometheus/#create-a-prometheus-configuration
    # If you're using Docker Desktop, the --add-host flag is optional. This flag makes sure that the host's internal IP gets exposed to the Prometheus container.
    extra_hosts:
      - host.docker.internal:host-gateway
    labels:
      dash.url: https://$PROJECT.$DOMAIN
      traefik.http.routers.ragflow.rule: Host(`$PROJECT.$DOMAIN`)
      traefik.http.services.ragflow.loadbalancer.server.port: 80

  ragflow-es01:
    image: elasticsearch:8.11.3
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    env_file: .env
    environment:
      - node.name=ragflow-es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=false
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - cluster.routing.allocation.disk.watermark.low=5gb
      - cluster.routing.allocation.disk.watermark.high=3gb
      - cluster.routing.allocation.disk.watermark.flood_stage=2gb
      - TZ=${TIMEZONE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: on-failure

  ragflow-mysql:
    # mysql:5.7 linux/arm64 image is unavailable.
    image: mysql:8.0.39
    env_file: .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${TIMEZONE}
    command: --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
      --tls_version="TLSv1.2,TLSv1.3"
      --init-file /data/application/init.sql
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/init.sql:/data/application/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure

  ragflow-minio:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z
    command: server --console-address ":9001" /data
    env_file: .env
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
      - TZ=${TIMEZONE}
    volumes:
      - minio_data:/data
    restart: on-failure

  ragflow-redis:
    # swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/valkey/valkey:8
    image: valkey/valkey:8
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    env_file: .env
    volumes:
      - redis_data:/data
    restart: on-failure

volumes:
  ragflow-logs:
  esdata01:
    driver: local
  mysql_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  ragflow:
    driver: bridge
