# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

# Original: <https://github.com/bitnami/containers/blob/0915d6b8b055eda3bc346ccb00f81e861cb8bb8c/bitnami/harbor-portal/docker-compose.yml>

services:
  harbor-registry:
    image: bitnami/harbor-registry:2
    environment:
      - REGISTRY_HTTP_SECRET=CHANGEME
    volumes:
      - registry_data:/storage
      # - ./config/registry/:/etc/registry/:ro
    configs:
      - source: harbor-registry-config
        target: /etc/registry/config.yml

  harbor-registryctl:
    image: bitnami/harbor-registryctl:2
    environment:
      - CORE_SECRET=CHANGEME
      - JOBSERVICE_SECRET=CHANGEME
      - REGISTRY_HTTP_SECRET=CHANGEME
    volumes:
      - registry_data:/storage
      # - ./config/registry/:/etc/registry/:ro
      # - ./config/registryctl/config.yml:/etc/registryctl/config.yml:ro
    configs:
      - source: harbor-registry-config
        target: /etc/registry/config.yml
      - source: harbor-registryctl-config
        target: /etc/registryctl/config.yml

  harbor-postgresql:
    image: bitnami/postgresql:14
    # container_name: harbor-db
    environment:
      - POSTGRESQL_PASSWORD=bitnami
      - POSTGRESQL_DATABASE=registry
    volumes:
      - postgresql_data:/bitnami/postgresql

  harbor-core:
    image: bitnami/harbor-core:2
    # container_name: harbor-core
    depends_on:
      - harbor-registry
    environment:
      - CORE_KEY=change-this-key
      - _REDIS_URL_CORE=redis://harbor-redis:6379/0
      - SYNC_REGISTRY=false
      - CHART_CACHE_DRIVER=redis
      - _REDIS_URL_REG=redis://harbor-redis:6379/1
      - PORT=8080
      - LOG_LEVEL=info
      - EXT_ENDPOINT=http://reg.mydomain.com
      - DATABASE_TYPE=postgresql
      - REGISTRY_CONTROLLER_URL=http://harbor-registryctl:8080
      - POSTGRESQL_HOST=harbor-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=registry
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=bitnami
      - POSTGRESQL_SSLMODE=disable
      - REGISTRY_URL=http://harbor-registry:5000
      - TOKEN_SERVICE_URL=http://harbor-core:8080/service/token
      - HARBOR_ADMIN_PASSWORD=bitnami
      - CORE_SECRET=CHANGEME
      - JOBSERVICE_SECRET=CHANGEME
      - ADMIRAL_URL=
      - CORE_URL=http://harbor-core:8080
      - JOBSERVICE_URL=http://harbor-jobservice:8080
      - REGISTRY_STORAGE_PROVIDER_NAME=filesystem
      - REGISTRY_CREDENTIAL_USERNAME=harbor_registry_user
      - REGISTRY_CREDENTIAL_PASSWORD=harbor_registry_password
      - READ_ONLY=false
      - RELOAD_KEY=
    volumes:
      - core_data:/data
      # - ./config/core/app.conf:/etc/core/app.conf:ro
      # - ./config/core/private_key.pem:/etc/core/private_key.pem:ro
    configs:
      - source: harbor-core-config
        target: /etc/core/app.conf
      - source: harbor-core-private-key
        target: /etc/core/private_key.pem

  harbor-portal:
    image: bitnami/harbor-portal:2
    # container_name: harbor-portal
    depends_on:
      - harbor-core

  harbor-jobservice:
    image: bitnami/harbor-jobservice:2
    # container_name: harbor-jobservice
    depends_on:
      - harbor-redis
      - harbor-core
    environment:
      - CORE_SECRET=CHANGEME
      - JOBSERVICE_SECRET=CHANGEME
      - CORE_URL=http://harbor-core:8080
      - REGISTRY_CONTROLLER_URL=http://harbor-registryctl:8080
      - REGISTRY_CREDENTIAL_USERNAME=harbor_registry_user
      - REGISTRY_CREDENTIAL_PASSWORD=harbor_registry_password
    volumes:
      - jobservice_data:/var/log/jobs
      # - ./config/jobservice/config.yml:/etc/jobservice/config.yml:ro
    configs:
      - source: harbor-jobservice-config
        target: /etc/jobservice/config.yml

  harbor-redis:
    image: bitnami/redis:latest
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes

  harbor-nginx:
    image: bitnami/nginx:latest
    # container_name: nginx
    # volumes:
    #   - ./config/proxy/nginx.conf:/opt/bitnami/nginx/conf/nginx.conf:ro
    configs:
      - source: harbor-nginx-config
        target: /opt/bitnami/nginx/conf/nginx.conf
    # ports:
    #   - 80:8080
    depends_on:
      harbor-core:
        condition: service_started
      harbor-postgresql:
        condition: service_started
      harbor-registry:
        condition: service_started
      harbor-portal:
        condition: service_started
    labels:
      dash.url: https://$PROJECT.$DOMAIN
      traefik.http.routers.harbor-nginx.rule: Host(`$PROJECT.$DOMAIN`)
      traefik.http.services.harbor-nginx.loadbalancer.server.port: 8080

configs:
  harbor-registry-config:
    content: |
      version: 0.1
      log:
        level: info
        fields:
          service: registry
      storage:
        cache:
          layerinfo: redis
        filesystem:
          rootdirectory: /storage
        maintenance:
          uploadpurging:
            enabled: false
        delete:
          enabled: true
      redis:
        addr: harbor-redis:6379
        password:
        db: 1
      http:
        addr: :5000
        secret: placeholder
        debug:
          addr: localhost:5001
      auth:
        htpasswd:
          realm: harbor-registry-basic-realm
          path: /etc/registry/passwd
      notifications:
        endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-core:8080/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s

  harbor-registryctl-config:
    content: |
      ---
      protocol: "http"
      port: 8080
      log_level: "INFO"
      registry_config: "/etc/registry/config.yml"

      #https_config:
      #  cert: "server.crt"
      #  key: "server.key"

  harbor-core-config:
    content: |
      appname = Harbor
      runmode = dev
      enablegzip = true

      [dev]
      httpport = 8080

  harbor-core-private-key:
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      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
      -----END RSA PRIVATE KEY-----

  harbor-jobservice-config:
    content: |
      ---
      #Protocol used to serve
      protocol: "http"

      #Config certification if use 'https' protocol
      #https_config:
      #  cert: "server.crt"
      #  key: "server.key"

      #Server listening port
      port: 8080

      #Worker pool
      worker_pool:
        #Worker concurrency
        workers: 10
        backend: "redis"
        #Additional config if use 'redis' backend
        redis_pool:
          #redis://[arbitrary_username:password@]ipaddress:port/database_index
          redis_url: redis://harbor-redis:6379/2
          namespace: "harbor_job_service_namespace"
      #Loggers for the running job
      job_loggers:
        - name: "STD_OUTPUT" # logger backend name, only support "FILE" and "STD_OUTPUT"
          level: "INFO" # INFO/DEBUG/WARNING/ERROR/FATAL
        - name: "FILE"
          level: "INFO"
          settings: # Customized settings of logger
            base_dir: "/var/log/jobs"
          sweeper:
            duration: 1 #days
            settings: # Customized settings of sweeper
              work_dir: "/var/log/jobs"

      #Loggers for the job service
      loggers:
        - name: "STD_OUTPUT" # Same with above
          level: "INFO"
      #Admin server endpoint
      admin_server: "http://harbor-adminserver:8080/"

  harbor-nginx-config:
    content: |
      worker_processes auto;
      error_log         "/opt/bitnami/nginx/logs/error.log";
      pid               "/opt/bitnami/nginx/tmp/nginx.pid";

      events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
      }

      http {
        tcp_nodelay on;

        # this is necessary for us to be able to disable request buffering in all cases
        proxy_http_version 1.1;

        upstream core {
          server harbor-core:8080;
        }

        upstream portal {
          server harbor-portal:8080;
        }

        log_format timed_combined '$$remote_addr - '
          '"$$request" $$status $$body_bytes_sent '
          '"$$http_referer" "$$http_user_agent" '
          '$$request_time $$upstream_response_time $$pipe';

        client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
        proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
        fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
        scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
        uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

        server {
          listen 8080;
          server_tokens off;
          # disable any limits to avoid HTTP 413 for large image uploads
          client_max_body_size 0;

          # costumized location config file can place to /opt/bitnami/nginx/conf with prefix harbor.http. and suffix .conf
          include /opt/bitnami/conf/nginx/conf.d/harbor.http.*.conf;

          location / {
            proxy_pass http://portal/;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;

            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /c/ {
            proxy_pass http://core/c/;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;

            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /api/ {
            proxy_pass http://core/api/;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;

            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /chartrepo/ {
            proxy_pass http://core/harbor-chartrepo/;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;

            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /v1/ {
            return 404;
          }

          location /v2/ {
            proxy_pass http://core/v2/;
            proxy_set_header Host $$http_host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;
            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /service/ {
            proxy_pass http://core/service/;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $$scheme;

            proxy_buffering off;
            proxy_request_buffering off;
          }

          location /service/notifications {
            return 404;
          }
        }
      }

volumes:
  registry_data:
    driver: local
  core_data:
    driver: local
  jobservice_data:
    driver: local
  postgresql_data:
    driver: local
